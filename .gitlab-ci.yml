image: ridibooks/gitlab-ci-docker-aws:1.6.0

stages:
  - test
  - build
  - deploy
  - notify
  - e2e
  - notify-e2e

variables:
  npm_config_cache: /builds/frontend/books/.npm
  CYPRESS_CACHE_FOLDER: /builds/frontend/books/cache/Cypress

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - .npm
    - cache/Cypress
    - node_modules

test:jest:
  stage: test
  before_script:
    - echo "FAIL" > .job_status
    - echo "TEST" > .stage
    - yarn install
  script:
    - yarn test
    - echo "SUCCESS" > .job_status
  after_script:
    - ./node_modules/.bin/codecov
    - ./notify/slack-notify.sh

build:
  stage: build
  variables:
    ENVIRONMENT: 'local'
  except:
    - master
    - development
    - staging
  before_script:
    - echo "FAIL" > .job_status
    - echo "BUILD" > .stage
    - yarn install
  script:
    - yarn build src
    - echo "SUCCESS" > .job_status

.deploy-template:
  stage: deploy
  allow_failure: true
  before_script:
    - echo "FAIL" > .job_status
    - echo "DEPLOY" > .stage
    - yarn install
  script:
    - env | awk '/STATIC_CDN_URL|ENVIRONMENT|SENTRY_DSN/' >> .env
    - ./node_modules/.bin/serverless config credentials --provider aws --key $AWS_ACCESS_KEY_ID
      --secret $AWS_SECRET_ACCESS_KEY
    - yarn deploy
    - aws cloudfront create-invalidation --distribution-id $LAMBDA_CDN_DISTRIBUTION_ID --paths "/*"
    - aws cloudfront create-invalidation --distribution-id $STATIC_CDN_DISTRIBUTION_ID --paths "/*"
    - LATEST_SLS_DEPLOY_TIMESTAMP=$(sls deploy list | awk '/Timestamp/' | awk '{print $3}' | awk
      END{print})
    - LATEST_COMMIT_HASH=$(git rev-parse HEAD)
    - echo "SUCCESS" > .job_status
  artifacts:
    paths:
      - .job_status
      - .stage

deploy-development:
  extends: .deploy-template
  only:
    - development
  variables:
    ENVIRONMENT: 'development'
    AWS_ACCESS_KEY_ID: $DEV_AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY: $DEV_AWS_SECRET_ACCESS_KEY
    STATIC_CDN_URL: $DEV_STATIC_CDN_URL
    STATIC_CDN_DISTRIBUTION_ID: $DEV_STATIC_CDN_DISTRIBUTION_ID
    LAMBDA_CDN_DISTRIBUTION_ID: $DEV_CDN_DISTRIBUTION_ID
  environment:
    name: development
    url: https://books.ridi.io

deploy-staging:
  extends: .deploy-template
  only:
    - staging
  when: manual
  variables:
    ENVIRONMENT: 'staging'
    AWS_ACCESS_KEY_ID: $STAGING_AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY: $STAGING_AWS_SECRET_ACCESS_KEY
    STATIC_CDN_URL: $DEV_STATIC_CDN_URL

deploy-production:
  extends: .deploy-template
  only:
    - master
  when: manual
  variables:
    ENVIRONMENT: 'production'
    AWS_ACCESS_KEY_ID: $PRODUCTION_AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY: $PRODUCTION_AWS_SECRET_ACCESS_KEY
    STATIC_CDN_URL: $DEV_STATIC_CDN_URL

.e2e:
  tags:
    - ridicorp
    - aws
  image: cypress/base:10
  stage: e2e
  allow_failure: true
  before_script:
    - echo "FAIL" > .job_status
    - echo "E2E" > .stage
    - yarn add cypress
    - ./node_modules/.bin/cypress verify
  artifacts:
    expire_in: 1 week
    when: always
    paths:
      - cypress/screenshots
      - cypress/videos
      - .job_status
      - .stage
  script:
    - ./node_modules/.bin/cypress run
    - echo "SUCCESS" > .job_status

e2e-development:
  extends: .e2e
  only:
    - development
  allow_failure: true
  variables:
    CYPRESS_BASE_URL: https://books.ridi.io

e2e-staging:
  extends: .e2e
  when: manual
  only:
    - staging
  variables:
    CYPRESS_BASE_URL: https://web-staging.crying.dance

e2e-production:
  extends: .e2e
  when: manual
  only:
    - master
  variables:
    CYPRESS_BASE_URL: https://web-production.crying.dance

notify:
  when: always
  stage: notify
  only:
    - master
    - development
    - staging
  before_script:
    - apk --update add git
    - export CI_COMMIT_TITLE=`git log -1 --pretty=%B | head -n1`
  script:
    - ./notify/slack-notify.sh

notify-e2e:
  stage: notify-e2e
  when: always
  only:
    - master
    - development
    - staging
  before_script:
    - apk --update add git
    - export CI_COMMIT_TITLE=`git log -1 --pretty=%B | head -n1`
  script:
    - ./notify/slack-notify-e2e.sh
