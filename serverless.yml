service: books

package:
  exclude:
    - node_modules/.cache/**
    - node_modules/@types/**
    - node_modules/serverless/**
    - node_modules/codecov/**
    - node_modules/aws-sdk/**
    - node_modules/prettier/**
    - '*.js.map'
    - .cache
    - coverage/**
    - static/**
    - secrets.json
    - yarn.lock
    - provisioning/**
    - cypress/**
    - src/**
    - tslint.json
    - tsconfig.json

provider:
  name: aws
  runtime: nodejs10.x
  region: ${self:custom.secrets.REGION}
  stage: ${opt:stage, 'development'}
  # CloudFormation Name
  stackName: books-sls-${opt:stage, 'development'}
  deploymentBucket:
    name: books.sls.${opt:stage, 'development'}.${self:provider.region}.deploys
  # serverSideEncryption: AES256
  environment:
    NODE_ENV: ${self:custom.secrets.NODE_ENV}

functions:
  server:
    path: /
    handler: server/index.handler
    events:
      - cors: true
      - http:
          method: ANY
          path: /
      - http:
          method: ANY
          path: /{proxy+}
# Proxy Resource:
# https://docs.aws.amazon.com/ko_kr/apigateway/latest/developerguide/api-gateway-set-up-simple-proxy.html

plugins:
  - serverless-offline
  - serverless-apigw-binary
  #  - serverless-domain-manager
  - serverless-s3-sync

# Serverless.js Custom Domain 사용하지 않을 경우 다음 이슈 확인
# https://github.com/Vadorequest/serverless-with-next#known-issues
custom:
  s3Sync:
    - bucketName: books.sls.${opt:stage, 'development'}.${self:provider.region}.deploys
      bucketPrefix: static/ # optional
      localDir: static/ # required
    - bucketName: books.sls.${opt:stage, 'development'}.${self:provider.region}.deploys
      bucketPrefix: _next/ # optional
      localDir: build/
      params: # optional
        - '*.js':
            CacheControl: 'public, max-age=31536000'

  stage: ${opt:stage, 'development'}
  secrets: ${file(secrets.json)}
  domains:
    production:
      lambda: ${self:custom.secrets.PROD_DOMAIN}
      static: ${self:custom.secrets.PROD_STATIC_DOMAIN}
    staging:
      lambda: ${self:custom.secrets.STAGING_DOMAIN}
      static: ${self:custom.secrets.STAGING_STATIC_DOMAIN}
    development:
      lambda: ${self:custom.secrets.DEV_DOMAIN}
      static: ${self:custom.secrets.DEV_STATIC_DOMAIN}

  apigwBinary:
    types:
      - '*/*'
#  customDomain:
#    domainName: ${self:custom.domains.${self:custom.stage}.lambda}
#    basePath: ''
#    stage: ${opt:stage, 'development'}
#    certificateName: ${self:custom.secrets.ACM_NAME}
#    createRoute53Record: false
#    endpointType: 'regional'

resources:
  Resources:
    StaticBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: books.sls.${opt:stage, 'development'}.${self:provider.region}.deploys
        PolicyDocument:
          Statement:
            - Sid: 'AllowPublicRead'
              Action:
                - 's3:GetObject'
              Effect: 'Allow'
              Resource:
                - arn:aws:s3:::books.sls.${opt:stage,'development'}.${self:provider.region}.deploys/_next/*
                - arn:aws:s3:::books.sls.${opt:stage,'development'}.${self:provider.region}.deploys/static/*
              Principal: '*'
#    LambdaDNSRecord:
#      Type: AWS::Route53::RecordSet
#      Properties:
#        HostedZoneName: store.ridi.io.
#        Name: ${self:custom.domains.${self:custom.stage}.lambda}
#        Type: A
#        AliasTarget:
#          DNSName: d37y2lgp9u1ne4.cloudfront.net.
#          HostedZoneId: Z2FDTNDATAQYW2
#    StaticDNSRecord:
#      Type: AWS::Route53::RecordSet
#      Properties:
#        HostedZoneName: store.ridi.io.
#        Name: ${self:custom.domains.${self:custom.stage}.static}
#        Type: A
#        AliasTarget:
#          DNSName: d1dpwi79ahko80.cloudfront.net.
#          HostedZoneId: Z2FDTNDATAQYW2
# https://docs.aws.amazon.com/ko_kr/AWSCloudFormation/latest/UserGuide/aws-properties-route53-aliastarget.html
