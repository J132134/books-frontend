service: books

package:
  excludeDevDependencies: true
  exclude:
    - '**/*.map'
    - .cache
    - 'static/**'
    - 'src/tests/**'
    - 'provisioning/**'
    - 'cypress/**'
    - 'src/**'
    - 'dist/**'
    - secrets.json
    - coverage/**
    - yarn.lock
    - tsconfig.json
  include:
    - src/utils/sentry.js

provider:
  name: aws
  runtime: nodejs10.x
  region: ${self:custom.secrets.REGION}
  stage: ${opt:stage, 'development'}
  # CloudFormation Name
  stackName: books-sls-${opt:stage, 'development'}
  deploymentBucket:
    name: books.sls.${opt:stage, 'development'}.${self:provider.region}.deploys
  # serverSideEncryption: AES256
  environment:
    NODE_ENV: ${self:custom.secrets.NODE_ENV}
    NODE_PATH: './:/opt'
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 'lambda:InvokeFunction'
      Resource:
        - Fn::Join:
            - ':'
            - - arn:aws:lambda
              - Ref: AWS::Region
              - Ref: AWS::AccountId
              - function:${self:service}-${opt:stage, self:provider.stage}-*

functions:
  server:
    path: /
    handler: server/index.handler
    warmup:
      enabled:
        - development
        - production
    events:
      - cors: true
      - http:
          method: ANY
          path: /
      - http:
          method: ANY
          path: /{proxy+}
  partials_gnb:
    path: partials/gnb
    handler: server/index.handler
    warmup:
      enabled:
        - development
        - production
  partials_footer:
    path: partials/footer
    handler: server/index.handler
    warmup:
      enabled:
        - development
        - production

plugins:
  - serverless-offline
  - serverless-apigw-binary
  - serverless-s3-sync
  - serverless-plugin-warmup

custom:
  warmup:
    enabled: true
    cleanFolder: false
    memorySize: 512
    timeout: 20
    prewarm: true
    concurrency: 3
    events:
      - schedule: 'cron(0/3 0-24 ? * MON-SUN *)' #
  s3Sync:
    - bucketName: books.sls.${opt:stage, 'development'}.${self:provider.region}.deploys
      bucketPrefix: static/ # optional
      localDir: static/ # required
    - bucketName: books.sls.${opt:stage, 'development'}.${self:provider.region}.deploys
      bucketPrefix: _next/ # optional
      localDir: build/
      params: # optional
        - '*.js':
            CacheControl: 'public, max-age=31536000'

  stage: ${opt:stage, 'development'}
  secrets: ${file(secrets.json)}
  domains:
    production:
      lambda: ${self:custom.secrets.PROD_DOMAIN}
      static: ${self:custom.secrets.PROD_STATIC_DOMAIN}
    staging:
      lambda: ${self:custom.secrets.STAGING_DOMAIN}
      static: ${self:custom.secrets.STAGING_STATIC_DOMAIN}
    development:
      lambda: ${self:custom.secrets.DEV_DOMAIN}
      static: ${self:custom.secrets.DEV_STATIC_DOMAIN}

  apigwBinary:
    types:
      - '*/*'

resources:
  Resources:
    StaticBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: books.sls.${opt:stage, 'development'}.${self:provider.region}.deploys
        PolicyDocument:
          Statement:
            - Sid: 'AllowPublicRead'
              Action:
                - 's3:GetObject'
              Effect: 'Allow'
              Resource:
                - arn:aws:s3:::books.sls.${opt:stage,'development'}.${self:provider.region}.deploys/_next/*
                - arn:aws:s3:::books.sls.${opt:stage,'development'}.${self:provider.region}.deploys/static/*
              Principal: '*'
